
name: Deploy Dev build


on:
  push:
    branches: 
      - Dev

jobs:
  build:
    runs-on: [self-hosted, local-runner]
    env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: true

    steps:
    - uses: actions/checkout@v2

    - name: Execute Token Replacement Script
      run: |
          $githubRef = $env:GITHUB_REF
          $branchName = ($githubRef -split '/')[-1]

          Write-Host "Current branch: $branchName"

          # Specify the paths to your web.config and tokenization file
          $webConfigPath = "web.config"
          if ($branchName -eq "master") {
            $tokenizationFilePath = "configuration\appSettings.Production.json"
          } else {
            $tokenizationFilePath = "configuration\appSettings.Development.json"
          }

          # Read the tokenization file (e.g., appSettings.Production.json)
          $tokenizationData = Get-Content $tokenizationFilePath | ConvertFrom-Json

          # Load the content of the web.config file
          $webConfigContent = Get-Content $webConfigPath

          # Iterate through each key-value pair in the tokenization data and replace tokens in the web.config
          foreach ($key in $tokenizationData.PSObject.Properties.Name) {
              $token = $key
              $value = $tokenizationData.$key

              # Replace the token with the corresponding value in the web.config content
              $webConfigContent = $webConfigContent -replace [regex]::Escape($token), $value
          }

          # Save the modified content back to the web.config file
          $webConfigContent | Set-Content $webConfigPath -Force

          Write-Host "Tokens replaced in web.config.  $branchName"

    
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1
      

    - name: Create Build Directory
      run: mkdir _build
      
    - name: Restore Packages
      run: nuget restore mvc-app.sln

    - name: Build Solution
      run: |
        MSBuild.exe mvc-app.sln /nologo /nr:false /p:DeployOnBuild=true /p:DeployDefaultTarget=WebPublish /p:WebPublishMethod=FileSystem /p:DeleteExistingFiles=True /p:platform="Any CPU" /p:configuration="Release" /p:PublishUrl="../_build"

    - name: Create Published directory and take backup
      run: |
        if (-not (Test-Path -Path "C:\runner\published")) {
            Write-Host "Directory does not exist"
            New-Item -Path "C:\runner\published" -ItemType Directory
        } else {
            Write-Host "Directory already exists"
            # Backup the directory contents to a new directory with the current date and time
            $currentDateTime = Get-Date -Format "yyyyMMddHHmmss"
            $backupDirectory = "C:\runner\backup\$currentDateTime"
            New-Item -Path $backupDirectory -ItemType Directory
            Copy-Item -Path "C:\runner\published\*" -Destination $backupDirectory -Recurse
        }


    - name: Copy Build Directory published directory
      run: |
        xcopy "C:\runner\actions-runner-win-x64-2.311.0\_work\mvc-app\_build" "C:\runner\published" /S /E /H /Y /D /Z /I
      shell: cmd

    #- name: Install RunAs module for running IIS reset 
    #  run: Install-Module RunAs

    - name: Restart IIS
      run: |
       iisreset /restart

        
        